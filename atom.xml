<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慢</title>
  
  <subtitle>楚栋浩的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-28T12:22:44.406Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>楚栋浩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给启汉</title>
    <link href="http://yoursite.com/post/%E7%BB%99%E5%90%AF%E6%B1%89/"/>
    <id>http://yoursite.com/post/给启汉/</id>
    <published>2019-04-28T12:00:00.000Z</published>
    <updated>2019-04-28T12:22:44.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>方括号的意思是可选，如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">尖括号的意思是必须，如```&lt;ip&gt;</span><br></pre></td></tr></table></figure></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>作用：用来连接远程服务器</p><p>如何使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [&lt;person&gt;@]&lt;ip&gt;</span><br></pre></td></tr></table></figure><h2 id="tigervncserver"><a href="#tigervncserver" class="headerlink" title="tigervncserver"></a>tigervncserver</h2><p>作用：启动一个桌面环境，等待用户连接</p><p>如何使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tigervncserver [-localhost no] :&lt;num&gt;</span><br></pre></td></tr></table></figure><p>其中，<figure class="highlight plain"><figcaption><span>no```意思是接受远程连接，在你这里必须</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## xtigervncviewer</span><br><span class="line"></span><br><span class="line">作用：连接一个vnc桌面服务</span><br><span class="line"></span><br><span class="line">其中要注意ip、桌面id、，即上面的```&lt;num&gt;</span><br></pre></td></tr></table></figure></p><p>如：</p><p>VNC server<code>127.0.0.1:2</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;方括号的意思是可选，如&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/post/test/"/>
    <id>http://yoursite.com/post/test/</id>
    <published>2019-04-08T11:05:54.247Z</published>
    <updated>2019-04-08T11:05:54.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试公式"><a href="#测试公式" class="headerlink" title="测试公式"></a>测试公式</h2><p>$$ \sum_{i=0}^{n}i^2+i+i^{^{\frac{1}{2}}} $$<br><a id="more"></a></p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><img src="http://public-media-chudonghao.oss-cn-shanghai.aliyuncs.com/%E6%A5%9A%E6%A0%8B%E6%B5%A9%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87.png" alt> </p><h2 id="测试mermaid"><a href="#测试mermaid" class="headerlink" title="测试mermaid"></a>测试mermaid</h2><pre><mermaid>graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</mermaid></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试公式&quot;&gt;&lt;a href=&quot;#测试公式&quot; class=&quot;headerlink&quot; title=&quot;测试公式&quot;&gt;&lt;/a&gt;测试公式&lt;/h2&gt;&lt;p&gt;$$ \sum_{i=0}^{n}i^2+i+i^{^{\frac{1}{2}}} $$&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>诗</title>
    <link href="http://yoursite.com/post/%E8%AF%97/"/>
    <id>http://yoursite.com/post/诗/</id>
    <published>2019-04-03T02:44:36.000Z</published>
    <updated>2019-04-03T02:53:36.400Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些诗<br><a id="more"></a></p><div style="text-align:center;"><br>上李邕<br>李白<br>大鹏一日同风起，扶摇直上九万里。<br>假令风歇时下来，犹能簸却沧溟水。<br>时人见我恒殊调，闻余大言皆冷笑。<br>宣父犹能畏后生，丈夫未可轻年少。<br><br>励学篇<br>赵恒<br>富家不用买良田，书中自有千钟粟。<br>安居不用架高楼，书中自有黄金屋。<br>出门莫恨无人随，书中车马多如簇。<br>娶妻莫恨无良媒，书中自有颜如玉。<br>男儿欲遂平生志，五经勤向窗前读。<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些诗&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>C++模板实参推导</title>
    <link href="http://yoursite.com/post/c-%E6%A8%A1%E6%9D%BF%E5%AE%9E%E5%8F%82%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/post/c-模板实参推导/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-03T04:53:52.086Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/language/template_argument_deduction" target="_blank" rel="noopener">模板实参推导 - cppreference.com</a> </p><h2 id="引用折叠"><a href="#引用折叠" class="headerlink" title="引用折叠"></a>引用折叠</h2><ul><li><code>T &amp; &amp;</code> <code>T &amp; &amp;&amp;</code> <code>T &amp;&amp; &amp;</code>都被折叠为<code>T &amp;</code></li><li><code>T &amp;&amp; &amp;&amp;</code>折叠为<code>T &amp;&amp;</code></li></ul><h2 id="模板实参推导表"><a href="#模板实参推导表" class="headerlink" title="模板实参推导表"></a>模板实参推导表</h2><table><thead><tr><th></th><th>int &amp;</th><th>const int &amp;</th><th>int &amp;&amp;</th><th>const int &amp;&amp;</th></tr></thead><tbody><tr><td>T / const T</td><td>(int) [T = int]</td><td>(int) [T = int]</td><td>(int) [T = int]</td><td>(int) [T = int]</td></tr><tr><td>T &amp;</td><td>(int&amp;) [T = int]</td><td>(int const&amp;) [T = int const]</td><td>ERROR</td><td>(int const&amp;) [T = int const]</td></tr><tr><td>const T &amp;</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td></tr><tr><td>T &amp;&amp;</td><td>(int&amp;) [T = int&amp;]</td><td>(int const&amp;) [T = int const&amp;]</td><td>(int&amp;&amp;) [T = int]</td><td>(int const&amp;&amp;) [T = int const]</td></tr><tr><td>const T &amp;&amp;</td><td>ERROR</td><td>ERROR</td><td>(int const&amp;&amp;) [T = int]</td><td>(int const&amp;&amp;) [T = int]</td></tr></tbody></table><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocT</span><span class="params">(<span class="keyword">const</span> T t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooTR</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocTR</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooTr</span><span class="params">(T &amp;&amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocTr</span><span class="params">(<span class="keyword">const</span> T &amp;&amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">0</span>;</span><br><span class="line">  A2 a;</span><br><span class="line">  <span class="keyword">const</span> A2 ca = A2();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"int:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(i);</span><br><span class="line">  foocT(i);</span><br><span class="line">  fooTR(i);</span><br><span class="line">  foocTR(i);</span><br><span class="line">  fooTr(i);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(i);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void foocTr(const T &amp;&amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const int:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(ci);</span><br><span class="line">  foocT(ci);</span><br><span class="line">  fooTR(ci);</span><br><span class="line">  foocTR(ci);</span><br><span class="line">  fooTr(ci);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(ci);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void foocTr(const T &amp;&amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"int &amp;&amp;:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(i));</span><br><span class="line">  foocT(move(i));</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//fooTR(move(i));</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTR(T &amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  foocTR(move(i));</span><br><span class="line">  fooTr(move(i));</span><br><span class="line">  foocTr(move(i));</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const int &amp;&amp;:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(ci));</span><br><span class="line">  foocT(move(ci));</span><br><span class="line">  fooTR(move(ci));</span><br><span class="line">  foocTR(move(ci));</span><br><span class="line">  fooTr(move(ci));</span><br><span class="line">  foocTr(move(ci));</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"A:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(a);</span><br><span class="line">  foocT(a);</span><br><span class="line">  fooTR(a);</span><br><span class="line">  foocTR(a);</span><br><span class="line">  fooTr(a);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(a);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTr(const T &amp;&amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const A:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(ca);</span><br><span class="line">  foocT(ca);</span><br><span class="line">  fooTR(ca);</span><br><span class="line">  foocTR(ca);</span><br><span class="line">  fooTr(ca);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(ca);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTr(const T &amp;&amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"A &amp;&amp;:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(a));</span><br><span class="line">  foocT(move(a));</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//fooTR(move(a));</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTR(T &amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  foocTR(move(a));</span><br><span class="line">  fooTr(move(a));</span><br><span class="line">  foocTr(move(a));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const A &amp;&amp;:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(ca));</span><br><span class="line">  foocT(move(ca));</span><br><span class="line">  fooTR(move(ca));</span><br><span class="line">  foocTR(move(ca));</span><br><span class="line">  fooTr(move(ca));</span><br><span class="line">  foocTr(move(ca));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">int:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = int &amp;]</span><br><span class="line">void foocTr(const T &amp;&amp;) ERROR</span><br><span class="line">const int:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = const int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const int &amp;]</span><br><span class="line">void foocTr(const T &amp;&amp;) ERROR</span><br><span class="line">int &amp;&amp;:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) ERROR</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = int]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = int]</span><br><span class="line">const int &amp;&amp;:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = const int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const int]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = int]</span><br><span class="line">A:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = A2 &amp;]</span><br><span class="line">void fooTr(const T &amp;&amp;) ERROR</span><br><span class="line">const A:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = const A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const A2 &amp;]</span><br><span class="line">void fooTr(const T &amp;&amp;) ERROR</span><br><span class="line">A &amp;&amp;:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) ERROR</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = A2]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = A2]</span><br><span class="line">const A &amp;&amp;:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = const A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const A2]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = A2]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/language/template_argument_deduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;模板实参推导 - cppreference.com&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;引用折叠&quot;&gt;&lt;a href=&quot;#引用折叠&quot; class=&quot;headerlink&quot; title=&quot;引用折叠&quot;&gt;&lt;/a&gt;引用折叠&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T &amp;amp; &amp;amp;&lt;/code&gt; &lt;code&gt;T &amp;amp; &amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;T &amp;amp;&amp;amp; &amp;amp;&lt;/code&gt;都被折叠为&lt;code&gt;T &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T &amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;折叠为&lt;code&gt;T &amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模板实参推导表&quot;&gt;&lt;a href=&quot;#模板实参推导表&quot; class=&quot;headerlink&quot; title=&quot;模板实参推导表&quot;&gt;&lt;/a&gt;模板实参推导表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;int &amp;amp;&lt;/th&gt;
&lt;th&gt;const int &amp;amp;&lt;/th&gt;
&lt;th&gt;int &amp;amp;&amp;amp;&lt;/th&gt;
&lt;th&gt;const int &amp;amp;&amp;amp;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T / const T&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;amp;&lt;/td&gt;
&lt;td&gt;(int&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const]&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const T &amp;amp;&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;(int&amp;amp;) [T = int&amp;amp;]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const&amp;amp;]&lt;/td&gt;
&lt;td&gt;(int&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int const]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const T &amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>自动控制原理学习笔记</title>
    <link href="http://yoursite.com/post/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/自动控制原理学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T05:34:47.089Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="自动控制原理" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++模板编程</title>
    <link href="http://yoursite.com/post/c-%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/post/c-模板编程/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-22T16:17:22.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板的作用"><a href="#模板的作用" class="headerlink" title="模板的作用"></a>模板的作用</h2><h3 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h3><h3 id="静态反射机制"><a href="#静态反射机制" class="headerlink" title="静态反射机制"></a>静态反射机制</h3><p>对C++的静态反射机制，只能用NM来形容我的内心的感受</p><h2 id="主要名词"><a href="#主要名词" class="headerlink" title="主要名词"></a>主要名词</h2><p>重载决议　SFINAE　面向对象　面向过程　enable_if　auto　decltype　显示实例化　类型别名，别名模版　重载函数的地址</p><ul><li>enable_if使用SFINAE可以处理ambiguous</li><li>重载决议可以处理TODO</li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>函数模板名称查找（可能涉及参数依赖查找）　-&gt;　模板实参推导　-&gt;　模板实参替换（可能涉及 SFINAE ）　-&gt;　重载决议</p><h2 id="遇到的特殊要求：精确匹配函数，拒绝隐式转换"><a href="#遇到的特殊要求：精确匹配函数，拒绝隐式转换" class="headerlink" title="遇到的特殊要求：精确匹配函数，拒绝隐式转换"></a>遇到的特殊要求：精确匹配函数，拒绝隐式转换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * lib.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _T, <span class="keyword">typename</span> _T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(_T, _T2)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Manager, <span class="keyword">typename</span> _P&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsPreciseFuncRequiredDefined</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*Func)</span><span class="params">(_Manager &amp;, _P &amp;)</span></span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::true_type _(Func) &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::false_type _(...) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(_(&amp;foo))</span> type</span>;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">static</span> <span class="keyword">bool</span> value = type::value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _P,</span><br><span class="line">    <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">      IsPreciseFuncRequiredDefined&lt;Manager, _P&gt;::value</span><br><span class="line">    &gt;::type * = <span class="literal">nullptr</span>&gt;</span><br><span class="line">  <span class="keyword">void</span> DoSomeThingTo(_P &amp;p) &#123;</span><br><span class="line">    foo(*<span class="keyword">this</span>, p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * main.cpp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//#include&lt;lib.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> Person &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Manager&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(_Manager &amp;, Person &amp;)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;注释这部分则编译不通过，取消注释这部分则编译通过，满足要求!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Manager&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(_Manager &amp;, Student &amp;)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#125;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Manager m;</span><br><span class="line">  Student s;</span><br><span class="line">  m.DoSomeThingTo(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板的作用&quot;&gt;&lt;a href=&quot;#模板的作用&quot; class=&quot;headerlink&quot; title=&quot;模板的作用&quot;&gt;&lt;/a&gt;模板的作用&lt;/h2&gt;&lt;h3 id=&quot;代码复用&quot;&gt;&lt;a href=&quot;#代码复用&quot; class=&quot;headerlink&quot; title=&quot;代码复用&quot;
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++的爱与恨</title>
    <link href="http://yoursite.com/post/c-%E7%9A%84%E7%88%B1%E4%B8%8E%E6%81%A8/"/>
    <id>http://yoursite.com/post/c-的爱与恨/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-21T11:29:31.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>静态，确定类型</li><li>面向对象又底层</li><li>自由度高</li><li>模板编程</li><li>RAII等</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>自由度高，就跟西方所谓的自由一样<br><p>没有标准命名规范，没有标准包管理系统，没有标准构建系统<br></p><p>编程人员需要做很多编程工作之外的内容<br></p><p>自由应该是创造自由，思想自由，而不是很多不必要的自由<br></p><p>创造与思想是编程最重要的部分</p></li><li>模板编程<br><p>模板的重要作用有二：一是代码复用，二是反射<br></p><p>其中的反射机制跟坨屎一样</p></li><li>其他<br><p>语法其实包含着思想，语法应该体现思想。这可以参考Rust</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态，确定类型&lt;/li&gt;
&lt;li&gt;面向对象又底层&lt;/li&gt;
&lt;li&gt;自由度高&lt;/li&gt;
&lt;li&gt;模板编程&lt;/li&gt;
&lt;li&gt;RA
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>信号与系统学习笔记</title>
    <link href="http://yoursite.com/post/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/信号与系统学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T06:12:29.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p><img src alt="图１"><br>图１、几种信号</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第一种定义：随时间变化的物理量</p><ul><li>不一定只随时间变化</li><li>不一定是物理量</li><li>不一定是变量</li></ul><p>第二种定义：一个确定的函数，如图１</p><h3 id="信号的分类"><a href="#信号的分类" class="headerlink" title="信号的分类"></a>信号的分类</h3><p>分类方法１：</p><ul><li>确定性信号，可以用确定的时间函数加以确定</li><li>随机信号，可以统计特征描述</li></ul><p>分类方法２，如图１：</p><ul><li>连续信号</li><li>离散信号</li></ul><p>分类方法３：</p><ul><li>周期信号</li><li>非周期信号</li></ul><p>讨论：周期信号与周期信号的叠加或相乘之后的信号</p><h3 id="信号的表述"><a href="#信号的表述" class="headerlink" title="信号的表述"></a>信号的表述</h3><p>时域法$f(t)$<br>变换域法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信号&quot;&gt;&lt;a href=&quot;#信号&quot; class=&quot;headerlink&quot; title=&quot;信号&quot;&gt;&lt;/a&gt;信号&lt;/h2&gt;&lt;p&gt;&lt;img src alt=&quot;图１&quot;&gt;&lt;br&gt;图１、几种信号&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="信号与系统" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数字信号处理学习笔记</title>
    <link href="http://yoursite.com/post/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/数字信号处理学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T05:34:25.269Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数字信号处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>对反射机制的思考</title>
    <link href="http://yoursite.com/post/%E5%AF%B9%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/post/对反射机制的思考/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-21T11:13:08.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><ul><li>类型的属性</li><li>某种函数（过程）调用的合法性</li></ul><h2 id="C-中遇到的问题"><a href="#C-中遇到的问题" class="headerlink" title="C++中遇到的问题"></a>C++中遇到的问题</h2><ul><li>如何判断一个调用是否合法，并确定具体调用了<strong>哪个重载</strong>函数<br><br>虽然可以以某种方式实现，但实现的方法非常有技巧性，不常规</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反射的作用&quot;&gt;&lt;a href=&quot;#反射的作用&quot; class=&quot;headerlink&quot; title=&quot;反射的作用&quot;&gt;&lt;/a&gt;反射的作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类型的属性&lt;/li&gt;
&lt;li&gt;某种函数（过程）调用的合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;C-中
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>C++填坑之路</title>
    <link href="http://yoursite.com/post/c-%E5%A1%AB%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/post/c-填坑之路/</id>
    <published>2019-03-28T14:43:25.000Z</published>
    <updated>2019-04-21T05:06:40.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组变量加减操作"><a href="#数组变量加减操作" class="headerlink" title="数组变量加减操作"></a>数组变量加减操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *(a+<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//NOTE a可视为元素指针</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; *++a &lt;&lt; endl;//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="标准库迭代器"><a href="#标准库迭代器" class="headerlink" title="标准库迭代器"></a>标准库迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> i = v.begin();</span><br><span class="line">  v.erase(i);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> j = l.begin();</span><br><span class="line">  l.erase(j);</span><br><span class="line">  <span class="comment">//NOTE 这里的j已经失效,虽然输出了1</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 #这个输出看似正确,但没有意义</span><br></pre></td></tr></table></figure><p>迭代器是否失效请看<a href="https://zh.cppreference.com/w/cpp/container#迭代器非法化" target="_blank" rel="noopener">这里</a><br>使用时可以考虑erase函数的返回值 其为指向被删除元素的下一个元素的迭代器</p><h2 id="虚函数与成员函数调用行为与成员指针"><a href="#虚函数与成员函数调用行为与成员指针" class="headerlink" title="虚函数与成员函数调用行为与成员指针"></a>虚函数与成员函数调用行为与成员指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  A() &#123; foo(); &#125;</span><br><span class="line">  ~A() &#123; foo(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::foo()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foooo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::foooo()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    f();</span><br><span class="line">    A::f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  B() &#123; foo(); &#125;</span><br><span class="line">  ~B() &#123; foo(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::foo()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foooo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::foooo()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    f();</span><br><span class="line">    A::f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  B *bp = &amp;b;</span><br><span class="line">  A *ap = &amp;b;</span><br><span class="line">  ap-&gt;foo();</span><br><span class="line">  ap-&gt;A::foo();</span><br><span class="line">  <span class="keyword">void</span> (A::*Afoop)() = &amp;A::foo;</span><br><span class="line">  (ap-&gt;*Afoop)();</span><br><span class="line">  <span class="comment">//void (A::*Afuncp)() = &amp;A::func;</span></span><br><span class="line">  <span class="comment">//(bp-&gt;*Afuncp)();</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, &amp;B::f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, &amp;B::func);</span><br><span class="line">  <span class="comment">//cout &lt;&lt; &amp;B::func &lt;&lt; endl;</span></span><br><span class="line">  ap-&gt;foooo();</span><br><span class="line">  ap-&gt;A::foooo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A::foo()</span><br><span class="line">B::foo()</span><br><span class="line">B::foo()</span><br><span class="line">A::foo()</span><br><span class="line">B::foo()</span><br><span class="line">00000001</span><br><span class="line">00402010</span><br><span class="line">B::foooo()</span><br><span class="line">B::f()</span><br><span class="line">A::f()</span><br><span class="line">A::foooo()</span><br><span class="line">B::f()</span><br><span class="line">A::f()</span><br><span class="line">B::foo()</span><br><span class="line">A::foo()</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>构造函数与析构函数一个重要的职能或特点是类型确定，即进入函数时，先修改虚表指针，所以在其中对虚函数的调用不是运行时确定的（编译器的实现是直接调用，即不通过虚表）</li><li>成员函数指针形式的调用是动态的（TODO 成员函数指针的实现）</li><li>带域的调用形式是编译期确定的</li></ul><h2 id="非法delete问题"><a href="#非法delete问题" class="headerlink" title="非法delete问题"></a>非法delete问题</h2><h3 id="delete-2问题"><a href="#delete-2问题" class="headerlink" title="delete*2问题"></a>delete*2问题</h3><blockquote><p>“自由存储区可能会被破坏”<br>———《C+P》</p></blockquote><h3 id="delete-new-1-问题"><a href="#delete-new-1-问题" class="headerlink" title="delete[](new[]+1)问题"></a>delete[](new[]+1)问题</h3><p>cplusplus.com上说：</p><ul><li>delete[]的参数ptr，应该是new[]返回的ptr</li><li>如果delete的参数ptr无效，将产生未定义的结果<h3 id="A-a-new-B-2-delete-a"><a href="#A-a-new-B-2-delete-a" class="headerlink" title="A *a = new B[2];delete []a;"></a>A *a = new B[2];delete []a;</h3>经过测试，也是未定义的。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>这应该牵扯到C++堆内存管理问题，以上行为都将产生未定义结果，特别的，第二种情况下程序直接崩溃的可能性巨大。<h2 id="new-delete-顺序问题"><a href="#new-delete-顺序问题" class="headerlink" title="new[] delete[] 顺序问题"></a>new[] delete[] 顺序问题</h2>先构后析<h2 id="对合法但无效的栈内存进行访问"><a href="#对合法但无效的栈内存进行访问" class="headerlink" title="对合法但无效的栈内存进行访问"></a>对合法但无效的栈内存进行访问</h2>将会产生未定义的结果<h2 id="操作符的操作数的求值顺序"><a href="#操作符的操作数的求值顺序" class="headerlink" title="操作符的操作数的求值顺序"></a>操作符的操作数的求值顺序</h2><blockquote><p>“除逻辑操作符，“?:”操作符，“,”操作符外，其他操作符并未指定其操作数的求职顺序”<br>———《C+P》</p></blockquote></li></ul><p>比如<code>expr1*expr2</code>，<code>expr1</code>与<code>expr2</code>的求值顺序无法得知<br>比如表达式<code>if (ia[id++] &lt; ia[id] )</code>的行为没有明确定义<br>特别是在<code>expr1</code>与<code>expr2</code>操作涉及并修改同一对象时，求解顺序相当重要</p><p>个人：以上（《C+P》）的内容是我不经意间看见的，以前一直按照结合性方向使用上述类似表达式，比如自左向右结合就先计算左边，也没出现过严重问题，在这里记录以防不测。</p><h2 id="数组变量的使用"><a href="#数组变量的使用" class="headerlink" title="数组变量的使用"></a>数组变量的使用</h2><p>除<code>&amp;</code>与<code>sizeof</code>，对数组变量的使用将使数组变量提升为成员指针<br>例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10被忽略，即arr的类型被视为int *</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="comment">//arr_p被视为指向大小为10的数组的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>(*arr_p)[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组变量加减操作&quot;&gt;&lt;a href=&quot;#数组变量加减操作&quot; class=&quot;headerlink&quot; title=&quot;数组变量加减操作&quot;&gt;&lt;/a&gt;数组变量加减操作&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *(a+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//NOTE a可视为元素指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//cout &amp;lt;&amp;lt; *++a &amp;lt;&amp;lt; endl;//编译错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://yoursite.com/post/%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/post/算法/</id>
    <published>2019-03-28T14:43:25.000Z</published>
    <updated>2019-04-28T11:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有多个图片来自维基百科</p></blockquote><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><ul><li>排序的方法 插入、交换、选择、合并等</li><li>复杂度（最差、平均、和最好性能），依据列表（list）的大小$n$<ul><li>时间复杂度 一般而言，好的性能是 $ O(n\log n)$，坏的性能是 $ O(n^{2})$。对于一个排序理想的性能是 $O(n)$，但平均而言不可能达到。<strong>基于比较</strong>的排序算法对大多数输入而言<strong>至少需要$O(n \log n)$</strong>。</li><li>空间复杂度（内存等资源的使用量）</li></ul></li><li>交换的次数</li><li>比较的次数</li><li>稳定性 稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录 $R$和 $S$，且在原本的列表中 $R$出现在$S$之前，在排序过的列表中 $R$也将会是在$S$之前。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif" alt="冒泡排序"></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>和冒泡排序相比，明显减少了交换的次数</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b0/Selection_sort_animation.gif" alt="选择排序"><br><a id="more"></a></p><h3 id="侏儒排序"><a href="#侏儒排序" class="headerlink" title="侏儒排序"></a>侏儒排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Sorting_gnomesort_anim.gif" alt="侏儒排序"></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>设中分组<br>可实现方法之一：挖坑填数</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="快速排序"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote><p>可以想想打扑克起牌</p></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>是插入排序的一种更高效的改进版本</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d8/Sorting_shellsort_anim.gif" alt="希尔排序"></p><h3 id="图书馆排序"><a href="#图书馆排序" class="headerlink" title="图书馆排序"></a>图书馆排序</h3><blockquote><p>可以想象图书馆每行书籍后面的空位</p></blockquote><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>不断将小的有序集合合并为大的有序集合</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c5/Merge_sort_animation2.gif" alt="归并排序"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Merge-sort-example-300px.gif/220px-Merge-sort-example-300px.gif" alt="归并排序"></p><h3 id="梳排序"><a href="#梳排序" class="headerlink" title="梳排序"></a>梳排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/46/Comb_sort_demo.gif" alt="梳排序"></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif" alt="堆排序"></p><p>二叉树<br>满二叉树<br>完全二叉树<br>完全二叉树用链表表示：Parent&lt;=&gt;L[i] Left&lt;=&gt;L[2i+1] Right&lt;=&gt;L[2i+2]<br>大顶堆与小顶堆<br>长度为<code>len</code>的完全二叉树，最靠右的父亲的index为<code>len/2-1</code><br>堆排序的过程：</p><ul><li>建立大（小）顶堆<br>从最靠右的父亲开始调整子叶关系，使整个堆满足大（小）顶堆</li><li>迭代 最大堆调整<ul><li>移动堆顶（最大或最小值）（与最后一个元素交换）</li><li><code>--len</code></li><li>最大堆调整<br>从第一个父亲开始调整子叶关系，使整个堆重新满足大（小）顶堆</li></ul></li></ul><h3 id="内省排序"><a href="#内省排序" class="headerlink" title="内省排序"></a>内省排序</h3><p>考虑到快速排序的不稳定性，内省排序在一定条件下对子序列使用堆排序</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h3 id="耐心排序"><a href="#耐心排序" class="headerlink" title="耐心排序"></a>耐心排序</h3><p>桶排序的一种</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h2 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h2><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有多个图片来自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;排序的方法 插入、交换、选择、合并等&lt;/li&gt;
&lt;li&gt;复杂度（最差、平均、和最好性能），依据列表（list）的大小$n$&lt;ul&gt;
&lt;li&gt;时间复杂度 一般而言，好的性能是 $ O(n\log n)$，坏的性能是 $ O(n^{2})$。对于一个排序理想的性能是 $O(n)$，但平均而言不可能达到。&lt;strong&gt;基于比较&lt;/strong&gt;的排序算法对大多数输入而言&lt;strong&gt;至少需要$O(n \log n)$&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;空间复杂度（内存等资源的使用量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换的次数&lt;/li&gt;
&lt;li&gt;比较的次数&lt;/li&gt;
&lt;li&gt;稳定性 稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录 $R$和 $S$，且在原本的列表中 $R$出现在$S$之前，在排序过的列表中 $R$也将会是在$S$之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif&quot; alt=&quot;冒泡排序&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;和冒泡排序相比，明显减少了交换的次数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/b0/Selection_sort_animation.gif&quot; alt=&quot;选择排序&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL3.0教程</title>
    <link href="http://yoursite.com/post/opengl3-0%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/post/opengl3-0教程/</id>
    <published>2019-03-28T00:20:13.000Z</published>
    <updated>2019-03-28T00:20:47.857Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.tairan.com/archives/6126/" target="_blank" rel="noopener">OpenGL3.0教程 | 泰然网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.tairan.com/archives/6126/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenGL3.0教程 | 泰然网&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL中的坐标系</title>
    <link href="http://yoursite.com/post/opengl%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
    <id>http://yoursite.com/post/opengl中的坐标系/</id>
    <published>2019-03-28T00:16:26.000Z</published>
    <updated>2019-03-28T00:21:28.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://hi.csdn.net/attachment/201009/20/0_1284966861v2w3.gif" alt><br><a id="more"></a><br><a href="https://blog.csdn.net/u013467442/article/details/50524471" target="_blank" rel="noopener">OpenGl 坐标转换 - 借你一秒 - CSDN博客</a></p><p>Model<br>World<br>View(Eye)<br>Proj.<br>Nor.       x[-1,1]y[-1,1]z[-1,1]<br>Viewport   x[xMin,xMax],y[yMin,yMax],z[0,1](远离程度)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201009/20/0_1284966861v2w3.gif&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/post/git/"/>
    <id>http://yoursite.com/post/git/</id>
    <published>2019-03-28T00:13:29.000Z</published>
    <updated>2019-03-28T00:15:10.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>credential.helper=store 保存登录远端仓库时使用的账号密码<br>http.proxy=”” 设置代理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;config&quot;&gt;&lt;a href=&quot;#config&quot; class=&quot;headerlink&quot; title=&quot;config&quot;&gt;&lt;/a&gt;config&lt;/h2&gt;&lt;p&gt;credential.helper=store 保存登录远端仓库时使用的账号密码&lt;br&gt;http.proxy
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>读书</title>
    <link href="http://yoursite.com/post/%E8%AF%BB%E4%B9%A6/"/>
    <id>http://yoursite.com/post/读书/</id>
    <published>2019-03-28T00:06:31.000Z</published>
    <updated>2019-03-28T00:22:18.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文学书籍"><a href="#文学书籍" class="headerlink" title="文学书籍"></a>文学书籍</h2><ul><li style="list-style: none"><input type="checkbox" checked> 诗经</li><li style="list-style: none"><input type="checkbox"> 唐诗宋词</li><li style="list-style: none"><input type="checkbox" checked> 平凡的世界</li><li style="list-style: none"><input type="checkbox" checked> 三国演义</li><li style="list-style: none"><input type="checkbox"> 红楼梦<h2 id="其他书籍"><a href="#其他书籍" class="headerlink" title="其他书籍"></a>其他书籍</h2></li><li style="list-style: none"><input type="checkbox" checked> 人月神话</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文学书籍&quot;&gt;&lt;a href=&quot;#文学书籍&quot; class=&quot;headerlink&quot; title=&quot;文学书籍&quot;&gt;&lt;/a&gt;文学书籍&lt;/h2&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot; checked&gt;
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Linux目录与文件的常用约定</title>
    <link href="http://yoursite.com/post/linux%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>http://yoursite.com/post/linux目录与文件的常用约定/</id>
    <published>2019-03-27T23:27:52.000Z</published>
    <updated>2019-03-28T00:46:23.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件系统层次结构"><a href="#文件系统层次结构" class="headerlink" title="文件系统层次结构"></a>文件系统层次结构</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%A0%87%E5%87%86" target="_blank" rel="noopener">文件系统层次结构标准 - 维基百科，自由的百科全书</a><br><a href="https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.pdf" target="_blank" rel="noopener">[PDF]Filesystem Hierarchy Standard - Linux Foundation</a></p><h2 id="登录时用到的文件"><a href="#登录时用到的文件" class="headerlink" title="登录时用到的文件"></a>登录时用到的文件</h2><p><a href="https://wiki.archlinux.org/index.php/Zsh" target="_blank" rel="noopener">Zsh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件系统层次结构&quot;&gt;&lt;a href=&quot;#文件系统层次结构&quot; class=&quot;headerlink&quot; title=&quot;文件系统层次结构&quot;&gt;&lt;/a&gt;文件系统层次结构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://yoursite.com/post/docker/"/>
    <id>http://yoursite.com/post/docker/</id>
    <published>2019-03-27T23:15:54.000Z</published>
    <updated>2019-03-27T23:18:54.032Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000007056245" target="_blank" rel="noopener">docker,nginx,php-fpm</a><br><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007056245&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker,nginx,php-fpm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.do
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="decker" scheme="http://yoursite.com/tags/decker/"/>
    
  </entry>
  
  <entry>
    <title>常用软件</title>
    <link href="http://yoursite.com/post/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/post/常用软件/</id>
    <published>2019-03-27T23:09:13.000Z</published>
    <updated>2019-03-27T23:55:42.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编辑Markdown"><a href="#编辑Markdown" class="headerlink" title="编辑Markdown"></a>编辑Markdown</h2><p><a href="http://remarkableapp.github.io" target="_blank" rel="noopener">Remarkable</a></p><h2 id="C-IDE"><a href="#C-IDE" class="headerlink" title="C++IDE"></a>C++IDE</h2><p><a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">Clion</a></p><h2 id="壁纸自动切换"><a href="#壁纸自动切换" class="headerlink" title="壁纸自动切换"></a>壁纸自动切换</h2><p><a href="https://peterlevi.com/variety/" target="_blank" rel="noopener">Variety</a></p><h2 id="视频壁纸"><a href="#视频壁纸" class="headerlink" title="视频壁纸"></a>视频壁纸</h2><p>xwinwrap<br>komorebi<br>livewallpaper<br>video wallpaper (kde)</p><h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><p><a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">MySQL Workbench</a><br><a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">DataGrip</a></p><h2 id="U盘刻录-制作U盘启动器"><a href="#U盘刻录-制作U盘启动器" class="headerlink" title="U盘刻录/制作U盘启动器"></a>U盘刻录/制作U盘启动器</h2><p><a href="https://www.ultraiso.com/" target="_blank" rel="noopener">UltraISO</a><br>dd命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编辑Markdown&quot;&gt;&lt;a href=&quot;#编辑Markdown&quot; class=&quot;headerlink&quot; title=&quot;编辑Markdown&quot;&gt;&lt;/a&gt;编辑Markdown&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://remarkableapp.github.i
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="常用软件" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C++语法</title>
    <link href="http://yoursite.com/post/c-%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/post/c-语法/</id>
    <published>2019-03-27T22:15:18.000Z</published>
    <updated>2019-04-21T18:40:21.283Z</updated>
    
    <content type="html"><![CDATA[<p>C++一些基本语法问题<br><a id="more"></a></p><h2 id="模板友元"><a href="#模板友元" class="headerlink" title="模板友元"></a>模板友元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">foo_t</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">foo1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span></span><br><span class="line">    <span class="keyword">void</span> foo&lt;T&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enable-if"><a href="#enable-if" class="headerlink" title="enable_if"></a>enable_if</h2><p><a href="https://zh.cppreference.com/w/cpp/types/enable_if" target="_blank" rel="noopener">std::enable_if - cppreference.com</a><br><a href="https://blog.csdn.net/kiritow/article/details/50932012" target="_blank" rel="noopener">enable_if - Kiritow的学园 - CSDN博客</a></p><h2 id="typename-的第二作用"><a href="#typename-的第二作用" class="headerlink" title="typename 的第二作用"></a>typename 的第二作用</h2><p>为了消除歧义，显式地告诉编译器，T::bar是一个类型名。</p><h2 id="类的缺省函数"><a href="#类的缺省函数" class="headerlink" title="类的缺省函数"></a>类的缺省函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//缺省构造函数 </span></span><br><span class="line">    Class()&#123;&#125;</span><br><span class="line">    <span class="comment">//拷贝构造函数</span></span><br><span class="line">    Class(<span class="keyword">const</span> Class&amp;)&#123;&#125;</span><br><span class="line">    <span class="comment">//移动构造函数(C++11)</span></span><br><span class="line">    Class(Class&amp;&amp;)&#123;&#125;</span><br><span class="line">    <span class="comment">//移动赋值函数(C++11)</span></span><br><span class="line">    Class&amp; <span class="keyword">operator</span>=(Class&amp;&amp;)&#123;&#125;</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Class()&#123;&#125;</span><br><span class="line">    <span class="comment">//赋值运算符</span></span><br><span class="line">    Class&amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Class&amp;)&#123;&#125;</span><br><span class="line">    <span class="comment">//取址运算符 </span></span><br><span class="line">    Class*<span class="keyword">operator</span>&amp;()&#123;&#125;</span><br><span class="line">    <span class="comment">//取址运算符 const</span></span><br><span class="line">    <span class="keyword">const</span> Class*<span class="keyword">operator</span>&amp;()<span class="keyword">const</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="new与delete的重载"><a href="#new与delete的重载" class="headerlink" title="new与delete的重载"></a>new与delete的重载</h2><h2 id="C-默认类型与类型转换"><a href="#C-默认类型与类型转换" class="headerlink" title="C++默认类型与类型转换"></a>C++默认类型与类型转换</h2><h3 id="默认类型"><a href="#默认类型" class="headerlink" title="默认类型"></a>默认类型</h3><ul><li>整数默认有符号<ul><li><code>3</code> int</li><li><code>3000000000</code> long</li><li><code>&#39;3&#39;</code> char</li></ul></li><li>浮点数默认double<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><blockquote><p>C++定义了算数类型之间的内置转换以尽可能防止精度损失<br>———《C+P》</p></blockquote><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><h4 id="何时发生隐式类型转换"><a href="#何时发生隐式类型转换" class="headerlink" title="何时发生隐式类型转换"></a>何时发生隐式类型转换</h4></li><li>混合类型表达式，操作数转换为相同类型</li><li>条件表达式，转换为bool</li><li>赋值语句</li></ul><h4 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h4><p>转换原则是尽可能少的减少精度损失<br>TODO 溢出问题<br>TODO double与int等之间的转换</p><h4 id="指针转换"><a href="#指针转换" class="headerlink" title="指针转换"></a>指针转换</h4><p>注意数组变量</p><h4 id="数值或指针-gt-bool"><a href="#数值或指针-gt-bool" class="headerlink" title="数值或指针 -&gt; bool"></a>数值或指针 -&gt; bool</h4><h4 id="bool-gt-数值"><a href="#bool-gt-数值" class="headerlink" title="bool -&gt; 数值"></a>bool -&gt; 数值</h4><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><p>枚举类型默认继承于int</p><h4 id="隐式类类型转换"><a href="#隐式类类型转换" class="headerlink" title="隐式类类型转换"></a>隐式类类型转换</h4><p>“非explicit单参构造函数”和“非explicit转换操作符”可以实现隐式类型转换</p><blockquote><p>除非有明显的理由想要定义隐式转换（比如cin的bool或类的数学扩展等），否则，类型转换函数应该为explicit<br>——《C+P》</p></blockquote><h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><p>包含以下操作符（或C风格）的强制类型转换称作显示类型转换：<br><code>static_cast</code>，<code>dynamic_cast</code>，<code>const_cast</code>，<code>reinterpret_cast</code></p><h4 id="何时需要强制类型转换"><a href="#何时需要强制类型转换" class="headerlink" title="何时需要强制类型转换"></a>何时需要强制类型转换</h4><p>隐式类型转换被禁止时等</p><h2 id="RVO返回值优化"><a href="#RVO返回值优化" class="headerlink" title="RVO返回值优化"></a>RVO返回值优化</h2><p>想想构造函数→_→</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++一些基本语法问题&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
