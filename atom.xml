<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慢</title>
  
  <subtitle>楚栋浩的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-30T15:55:30.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>楚栋浩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>丰满的理想</title>
    <link href="http://yoursite.com/post/%E4%B8%B0%E6%BB%A1%E7%9A%84%E7%90%86%E6%83%B3/"/>
    <id>http://yoursite.com/post/丰满的理想/</id>
    <published>2019-06-19T08:09:37.000Z</published>
    <updated>2019-06-30T15:55:30.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="就想想"><a href="#就想想" class="headerlink" title="就想想"></a>就想想</h1><h2 id="一种编程语言"><a href="#一种编程语言" class="headerlink" title="一种编程语言"></a>一种编程语言</h2><ul><li><p>编译型原生</p></li><li><p>继承C++中优良的设计</p><ul><li>自由的内存管理</li><li>继承、重载、多态（可以考虑以某种更优雅的方式实现）</li></ul></li><li><p>改进C++的为人不爽的地方</p><ul><li>标准库“不作为”</li><li>标准委员会“不作为”。应考虑的是语言特性，而不是库库库</li><li>模板？模板！模板？！</li><li>“头文件”，“预处理”等老旧的代码组织结构</li><li>多语言配合，只有extern”C”？</li><li>标注库中的一些东西需要改进（最起码有些用起来不爽）</li><li>反射特性</li><li>等等</li></ul></li><li><p>拥有全面的构建和管理系统（平台，系统，环境），降低程序员的维护工作</p></li><li><p>拥有编译加速功能</p></li><li><p>更好的特性</p><ul><li>修饰特性，让编译器做更多的事情，如修饰一个类的的对象属性为不可复制，又如函数传入参数不能为nullptr</li><li>更好的模板特性</li><li>更好的反射特性</li><li>更好的拓展性（思考Python的胶水特性）</li></ul></li><li><p>其他</p><ul><li>合理的用符号代替文本</li></ul></li></ul><h3 id="总的来说："><a href="#总的来说：" class="headerlink" title="总的来说："></a>总的来说：</h3><ol><li><p>减轻程序员编程之外的工作，提高工作效率</p><ul><li>去除繁杂的头文件引用</li><li>构建库依赖自动解决系统</li><li>构建与之相匹配的健壮的有效的库管理系统</li><li>内建的项目构建系统</li><li>编译缓存技术来加快编译</li></ul></li><li><p>去除令人难以理解和丑陋的宏命令（PS：构建一个代码处理的插件系统（自动插入））</p></li><li><p>对模板编程的改进，例如</p><ul><li>模板参数可以是字符串</li><li>更智能的反射机制              </li></ul></li></ol><h2 id="基于这种编程语言，可以："><a href="#基于这种编程语言，可以：" class="headerlink" title="基于这种编程语言，可以："></a>基于这种编程语言，可以：</h2><ul><li>作为某种操作系统应用开发的基本语言（如JAVA对初生的Android）</li><li>舒适的进行GUI编程</li></ul><h2 id="3D图形"><a href="#3D图形" class="headerlink" title="3D图形"></a>3D图形</h2><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h3><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><h3 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h3><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;就想想&quot;&gt;&lt;a href=&quot;#就想想&quot; class=&quot;headerlink&quot; title=&quot;就想想&quot;&gt;&lt;/a&gt;就想想&lt;/h1&gt;&lt;h2 id=&quot;一种编程语言&quot;&gt;&lt;a href=&quot;#一种编程语言&quot; class=&quot;headerlink&quot; title=&quot;一种编程语言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://yoursite.com/post/mysql/"/>
    <id>http://yoursite.com/post/mysql/</id>
    <published>2019-05-26T12:27:52.000Z</published>
    <updated>2019-05-26T16:11:16.252Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="认证机制问题"><a href="#认证机制问题" class="headerlink" title="认证机制问题"></a>认证机制问题</h2><h3 id="表mysql-user保存认证信息"><a href="#表mysql-user保存认证信息" class="headerlink" title="表mysql.user保存认证信息"></a>表mysql.user保存认证信息</h3><h3 id="修改认证插件"><a href="#修改认证插件" class="headerlink" title="修改认证插件"></a>修改认证插件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">password</span> <span class="keyword">expire</span> <span class="keyword">never</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'密码'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;认证机制问题&quot;&gt;&lt;a href=&quot;#认证机制问题&quot; class=&quot;headerlink&quot; title=&quot;认证机制问题&quot;&gt;&lt;/a&gt;认证机制问题&lt;/h2&gt;&lt;h3 id=&quot;表mysql-user保存认证信息&quot;&gt;&lt;a href=&quot;#表m
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>《理性乐观派》读书笔记</title>
    <link href="http://yoursite.com/post/%E3%80%8A%E7%90%86%E6%80%A7%E4%B9%90%E8%A7%82%E6%B4%BE%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/《理性乐观派》读书笔记/</id>
    <published>2019-05-19T17:10:59.000Z</published>
    <updated>2019-05-19T17:40:13.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>专业化　交流　时间　创新/思想</p><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>思想交流类似基因交流，能产生新的东西！</p><p>时间可以用来衡量财富。</p><p>专业化与交换可以使人更富有（可以得到更多的时间）。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>创造就是重组。</p></blockquote><blockquote><p>衡量繁荣的真正尺度是时间。</p></blockquote><blockquote><p>只要某个地方的某个人有动机从事发明创造，以更好地满足他人需求，那么，持理性乐观态度的人就必然要的得出结论：人类生活最终还是会走向进步。</p></blockquote><blockquote><p>自给自足不是通往繁荣的路线。</p></blockquote><blockquote><p>交换、专业化分工以及它们带来的创新，最终“创造出了”时间。</p></blockquote><blockquote><p>真正的物物交换要求你放弃对自己有价值的一种东西，换回你认为更有价值的另一种东西。</p></blockquote><blockquote><p>我对大型企业倒没什么好感，它们效率低下，安于现状，还反对竞争。</p></blockquote><blockquote><p>商业兴旺发达的地方，亦是创造力和激情进发的所在。</p></blockquote><blockquote><p>错误的有机呼吁</p></blockquote><blockquote><p>贸易趋使人聚集到城镇里。</p></blockquote><blockquote><p>实体世界经常出现收益递减，但思想的世界就不一样了。</p></blockquote><blockquote><p>企业一辈子最危险的时候，就是它实现成功的那一刻，因为那时候它就停止创新了。</p><p>解决办法之一，是公司允许员工像创业家一样自由行事。</p><p>另一种办法是把问题外包出去，承诺给予奖金，让有效的发明家市场来解决它。</p><p>金钱在推动创新方面肯定很重要，但它绝对不是最重要的一点。</p></blockquote><blockquote><p>知识产权</p><p>把想法变成财富有几种方式：配方保密，先发优势，专利、版权或商标。</p><p>然而，要说专利推动了发明家搞发明创造，证据很少。</p></blockquote><blockquote><p>思想观念日益频繁的交换带来了现代世界速度日益加快的创新。</p></blockquote><blockquote><p>现代世界的历史，就是一部思想相遇、融合、交配和变异的历史。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键词&quot;&gt;&lt;a href=&quot;#关键词&quot; class=&quot;headerlink&quot; title=&quot;关键词&quot;&gt;&lt;/a&gt;关键词&lt;/h2&gt;&lt;p&gt;专业化　交流　时间　创新/思想&lt;/p&gt;
&lt;h3 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Opencv处理图像笔记</title>
    <link href="http://yoursite.com/post/opencv%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/opencv处理图像笔记/</id>
    <published>2019-05-15T12:28:40.000Z</published>
    <updated>2019-05-15T12:48:18.628Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="图像处理中的一类"><a href="#图像处理中的一类" class="headerlink" title="图像处理中的一类"></a>图像处理中的一类</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>灰度化</li><li>高斯模糊</li><li>Canny边缘检测</li><li>不规则ROI区域截取</li><li>霍夫直线检测</li></ol><h3 id="具体函数"><a href="#具体函数" class="headerlink" title="具体函数"></a>具体函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 颜色变换，如灰度化</span></span><br><span class="line">cvtColor()</span><br><span class="line"></span><br><span class="line">threshold()</span><br><span class="line"><span class="comment">// 高斯模糊</span></span><br><span class="line">GaussianBlur()</span><br><span class="line"><span class="comment">// Canny边缘检测</span></span><br><span class="line">Canny()</span><br><span class="line"><span class="comment">// ROI区域保留</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 霍夫直线提取</span></span><br><span class="line">HoughLinesP()</span><br></pre></td></tr></table></figure><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画线</span></span><br><span class="line">line()</span><br><span class="line"><span class="comment">// 矩形</span></span><br><span class="line">rectangle()</span><br><span class="line"><span class="comment">// 圆</span></span><br><span class="line">circle()</span><br><span class="line"><span class="comment">// 椭圆</span></span><br><span class="line">ellipse()</span><br><span class="line"><span class="comment">// 文字</span></span><br><span class="line">putText()</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">fillPoly()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;图像处理中的一类&quot;&gt;&lt;a href=&quot;#图像处理中的一类&quot; class=&quot;headerlink&quot; title=&quot;图像处理中的一类&quot;&gt;&lt;/a&gt;图像处理中的一类&lt;/h2&gt;&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt浏览器类型布局</title>
    <link href="http://yoursite.com/post/qt%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/post/qt浏览器类型布局/</id>
    <published>2019-05-15T12:11:52.000Z</published>
    <updated>2019-05-15T12:26:54.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一段代码"><a href="#一段代码" class="headerlink" title="一段代码"></a>一段代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QScrollArea</span></span><br><span class="line"><span class="comment">//   └─QWidget</span></span><br><span class="line"><span class="comment">//       ├─QLayout</span></span><br><span class="line"><span class="comment">//       ├─QLabel</span></span><br><span class="line"><span class="comment">//       ├─...</span></span><br><span class="line"><span class="comment">//       ...</span></span><br><span class="line"><span class="keyword">delete</span> ui_photo_list_;</span><br><span class="line">ui_photo_list_ = <span class="keyword">new</span> QWidget(<span class="keyword">this</span>);</span><br><span class="line">ui-&gt;photo_area-&gt;setWidget(ui_photo_list_);</span><br><span class="line">ui_photo_list_layout_ = <span class="keyword">new</span> QVBoxLayout(ui_photo_list_);</span><br><span class="line">ui_photo_list_layout_-&gt;setSizeConstraint(QLayout::SetMaximumSize);</span><br><span class="line"><span class="keyword">auto</span> *label = <span class="keyword">new</span> QLabel(<span class="string">"111111"</span>,ui_photo_list_);</span><br><span class="line">ui_photo_list_layout_-&gt;addWidget(label);</span><br><span class="line"><span class="keyword">auto</span> *label = <span class="keyword">new</span> QLabel(<span class="string">"222222"</span>,ui_photo_list_);</span><br><span class="line">ui_photo_list_layout_-&gt;addWidget(label);</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一段代码&quot;&gt;&lt;a href=&quot;#一段代码&quot; class=&quot;headerlink&quot; title=&quot;一段代码&quot;&gt;&lt;/a&gt;一段代码&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// QScrollArea&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   └─QWidget&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//       ├─QLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//       ├─QLabel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//       ├─...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//       ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; ui_photo_list_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui_photo_list_ = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QWidget(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui-&amp;gt;photo_area-&amp;gt;setWidget(ui_photo_list_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui_photo_list_layout_ = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QVBoxLayout(ui_photo_list_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui_photo_list_layout_-&amp;gt;setSizeConstraint(QLayout::SetMaximumSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; *label = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QLabel(&lt;span class=&quot;string&quot;&gt;&quot;111111&quot;&lt;/span&gt;,ui_photo_list_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui_photo_list_layout_-&amp;gt;addWidget(label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; *label = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QLabel(&lt;span class=&quot;string&quot;&gt;&quot;222222&quot;&lt;/span&gt;,ui_photo_list_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ui_photo_list_layout_-&amp;gt;addWidget(label);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>经济学知识</title>
    <link href="http://yoursite.com/post/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/post/经济学知识/</id>
    <published>2019-05-04T08:25:00.000Z</published>
    <updated>2019-05-04T09:54:55.256Z</updated>
    
    <content type="html"><![CDATA[<p>一些经济学名词</p><a id="more"></a><h2 id="蓝海战略"><a href="#蓝海战略" class="headerlink" title="蓝海战略"></a><a href="https://baike.baidu.com/item/蓝海战略/16203328" target="_blank" rel="noopener">蓝海战略</a></h2><p>蓝海战略是“红海战略”的对称。</p><p>目的是摆脱竞争，通过创造和获得新的需求、实施差异化和低成本，获取更高利润率。因把无人竞争的市场比作没有血腥的蓝海，故称。</p><h2 id="流动性"><a href="#流动性" class="headerlink" title="流动性"></a><a href="https://baike.baidu.com/item/流动性" target="_blank" rel="noopener">流动性</a></h2><h2 id="边际效应"><a href="#边际效应" class="headerlink" title="边际效应"></a><a href="https://baike.baidu.com/item/边际效应" target="_blank" rel="noopener">边际效应</a></h2><h2 id="路径依赖"><a href="#路径依赖" class="headerlink" title="路径依赖"></a><a href="https://baike.baidu.com/item/路径依赖" target="_blank" rel="noopener">路径依赖</a></h2><h2 id="价格歧视"><a href="#价格歧视" class="headerlink" title="价格歧视"></a><a href="https://baike.baidu.com/item/价格歧视" target="_blank" rel="noopener">价格歧视</a></h2><p>按人定价，按量定价，按类定价</p><h2 id="巨无霸指数"><a href="#巨无霸指数" class="headerlink" title="巨无霸指数"></a><a href="https://baike.baidu.com/item/巨无霸指数" target="_blank" rel="noopener">巨无霸指数</a></h2><h2 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a><a href="https://baike.baidu.com/item/破窗理论" target="_blank" rel="noopener">破窗效应</a></h2><p>此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。</p><h2 id="比较优势"><a href="#比较优势" class="headerlink" title="比较优势"></a><a href="https://baike.baidu.com/item/比较优势" target="_blank" rel="noopener">比较优势</a></h2><p>相对应的一个概念是绝对优势。</p><p>扬长避短。</p><h2 id="帕累托优化"><a href="#帕累托优化" class="headerlink" title="帕累托优化"></a><a href="https://baike.baidu.com/item/帕累托优化" target="_blank" rel="noopener">帕累托优化</a></h2><h2 id="机会成本"><a href="#机会成本" class="headerlink" title="机会成本"></a>机会成本</h2><h2 id="沉没成本"><a href="#沉没成本" class="headerlink" title="沉没成本"></a>沉没成本</h2><h2 id="信息不对称"><a href="#信息不对称" class="headerlink" title="信息不对称"></a><a href="https://baike.baidu.com/item/信息不对称" target="_blank" rel="noopener">信息不对称</a></h2><h2 id="不完全信息博弈"><a href="#不完全信息博弈" class="headerlink" title="不完全信息博弈"></a><a href="https://baike.baidu.com/item/%E4%B8%8D%E5%AE%8C%E5%85%A8%E4%BF%A1%E6%81%AF%E5%8D%9A%E5%BC%88" target="_blank" rel="noopener">不完全信息博弈</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些经济学名词&lt;/p&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="经济学" scheme="http://yoursite.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>高等数学学习笔记</title>
    <link href="http://yoursite.com/post/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/高等数学学习笔记/</id>
    <published>2019-04-30T10:00:00.000Z</published>
    <updated>2019-04-30T11:46:09.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数、极限、连续"><a href="#函数、极限、连续" class="headerlink" title="函数、极限、连续"></a>函数、极限、连续</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="邻域与去心邻域"><a href="#邻域与去心邻域" class="headerlink" title="邻域与去心邻域"></a>邻域与去心邻域</h4><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><h4 id="函数的表示方法"><a href="#函数的表示方法" class="headerlink" title="函数的表示方法"></a>函数的表示方法</h4><h5 id="显函数表示"><a href="#显函数表示" class="headerlink" title="显函数表示"></a>显函数表示</h5><h5 id="隐函数表示"><a href="#隐函数表示" class="headerlink" title="隐函数表示"></a>隐函数表示</h5><h5 id="参数方程表示"><a href="#参数方程表示" class="headerlink" title="参数方程表示"></a>参数方程表示</h5><h4 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h4><h4 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h4><h4 id="基本初等函数"><a href="#基本初等函数" class="headerlink" title="基本初等函数"></a>基本初等函数</h4><h4 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h4><h3 id="函数的初等特性"><a href="#函数的初等特性" class="headerlink" title="函数的初等特性"></a>函数的初等特性</h3><h4 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h4><h4 id="周期性"><a href="#周期性" class="headerlink" title="周期性"></a>周期性</h4><h4 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h4><h4 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h4><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h4><h4 id="自变量趋于有限值时函数的极限"><a href="#自变量趋于有限值时函数的极限" class="headerlink" title="自变量趋于有限值时函数的极限"></a>自变量趋于有限值时函数的极限</h4><h4 id="自变量趋于无穷时函数的极限"><a href="#自变量趋于无穷时函数的极限" class="headerlink" title="自变量趋于无穷时函数的极限"></a>自变量趋于无穷时函数的极限</h4><h4 id="无穷小与无穷大"><a href="#无穷小与无穷大" class="headerlink" title="无穷小与无穷大"></a>无穷小与无穷大</h4><h3 id="极限的性质"><a href="#极限的性质" class="headerlink" title="极限的性质"></a>极限的性质</h3><h4 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h4><h5 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h5><h5 id="有界性-1"><a href="#有界性-1" class="headerlink" title="有界性"></a>有界性</h5><h5 id="保号性"><a href="#保号性" class="headerlink" title="保号性"></a>保号性</h5><h5 id="列与子列极限的关系"><a href="#列与子列极限的关系" class="headerlink" title="列与子列极限的关系"></a>列与子列极限的关系</h5><h4 id="存在性质"><a href="#存在性质" class="headerlink" title="存在性质"></a>存在性质</h4><h5 id="夹逼定理"><a href="#夹逼定理" class="headerlink" title="夹逼定理"></a>夹逼定理</h5><h5 id="单调有界的数列必有极限"><a href="#单调有界的数列必有极限" class="headerlink" title="单调有界的数列必有极限"></a>单调有界的数列必有极限</h5><h4 id="运算性质"><a href="#运算性质" class="headerlink" title="运算性质"></a>运算性质</h4><h5 id="四则运算性质"><a href="#四则运算性质" class="headerlink" title="四则运算性质"></a>四则运算性质</h5><h5 id="复合运算性质"><a href="#复合运算性质" class="headerlink" title="复合运算性质"></a>复合运算性质</h5><h4 id="无穷小的性质"><a href="#无穷小的性质" class="headerlink" title="无穷小的性质"></a>无穷小的性质</h4><h5 id="基本性质-1"><a href="#基本性质-1" class="headerlink" title="基本性质"></a>基本性质</h5><h5 id="等价无穷小"><a href="#等价无穷小" class="headerlink" title="等价无穷小"></a>等价无穷小</h5><h5 id="x-gt-0时常用的等价无穷小"><a href="#x-gt-0时常用的等价无穷小" class="headerlink" title="x-&gt;0时常用的等价无穷小"></a>x-&gt;0时常用的等价无穷小</h5><h3 id="两个重要极限"><a href="#两个重要极限" class="headerlink" title="两个重要极限"></a>两个重要极限</h3><h2 id="函数的连续性"><a href="#函数的连续性" class="headerlink" title="函数的连续性"></a>函数的连续性</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h4><h4 id="间断点的分类"><a href="#间断点的分类" class="headerlink" title="间断点的分类"></a>间断点的分类</h4><h3 id="闭区间上连续函数的性质"><a href="#闭区间上连续函数的性质" class="headerlink" title="闭区间上连续函数的性质"></a>闭区间上连续函数的性质</h3><h4 id="最值定理"><a href="#最值定理" class="headerlink" title="最值定理"></a>最值定理</h4><h4 id="有界定理"><a href="#有界定理" class="headerlink" title="有界定理"></a>有界定理</h4><h4 id="零点定理"><a href="#零点定理" class="headerlink" title="零点定理"></a>零点定理</h4><h4 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h4><h1 id="导数与微分"><a href="#导数与微分" class="headerlink" title="导数与微分"></a>导数与微分</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><h3 id="可微"><a href="#可微" class="headerlink" title="可微"></a>可微</h3><h2 id="导数理论"><a href="#导数理论" class="headerlink" title="导数理论"></a>导数理论</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><h3 id="四则运算法则"><a href="#四则运算法则" class="headerlink" title="四则运算法则"></a>四则运算法则</h3><h3 id="复合函数求导法则"><a href="#复合函数求导法则" class="headerlink" title="复合函数求导法则"></a>复合函数求导法则</h3><h3 id="函数及其反函数一二阶导数之间关系"><a href="#函数及其反函数一二阶导数之间关系" class="headerlink" title="函数及其反函数一二阶导数之间关系"></a>函数及其反函数一二阶导数之间关系</h3><h3 id="隐函数与参数方程确定的导数"><a href="#隐函数与参数方程确定的导数" class="headerlink" title="隐函数与参数方程确定的导数"></a>隐函数与参数方程确定的导数</h3><h1 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数、极限、连续&quot;&gt;&lt;a href=&quot;#函数、极限、连续&quot; class=&quot;headerlink&quot; title=&quot;函数、极限、连续&quot;&gt;&lt;/a&gt;函数、极限、连续&lt;/h1&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高等数学" scheme="http://yoursite.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>未命名呢</title>
    <link href="http://yoursite.com/post/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%91%A2/"/>
    <id>http://yoursite.com/post/未命名呢/</id>
    <published>2019-04-28T15:00:00.000Z</published>
    <updated>2019-04-28T16:19:22.568Z</updated>
    
    <content type="html"><![CDATA[<p>一些歌曲</p><a id="more"></a><p>我以为　品冠</p><p>像鱼　王贰浪</p><p>慢慢　张学友</p><p>I believe　申晟勋</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些歌曲&lt;/p&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>给启汉</title>
    <link href="http://yoursite.com/post/%E7%BB%99%E5%90%AF%E6%B1%89/"/>
    <id>http://yoursite.com/post/给启汉/</id>
    <published>2019-04-28T12:00:00.000Z</published>
    <updated>2019-04-28T12:43:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>一些帮助</p><a id="more"></a><h2 id="前提须知"><a href="#前提须知" class="headerlink" title="前提须知"></a>前提须知</h2><p>方括号的意思是可选，如<code>[person]</code></p><p>尖括号的意思是必须，如<code>&lt;ip&gt;</code></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>作用：用来连接远程服务器</p><p>如何使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [&lt;person&gt;@]&lt;ip&gt;</span><br></pre></td></tr></table></figure><h2 id="tigervncserver"><a href="#tigervncserver" class="headerlink" title="tigervncserver"></a>tigervncserver</h2><p>作用：启动一个桌面环境，等待用户连接</p><p>如何使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tigervncserver [-localhost no] :&lt;num&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>-localhost no</code>意思是接受远程连接，在你这里必须</p><h2 id="xtigervncviewer"><a href="#xtigervncviewer" class="headerlink" title="xtigervncviewer"></a>xtigervncviewer</h2><p>作用：连接一个vnc桌面服务</p><p>其中要注意ip、桌面id即上面的<code>&lt;num&gt;</code></p><p>如：</p><p>VNC server<code>127.0.0.1:2</code></p><p>额外：连接桌面之后，按<code>F8</code>可以跳出vncviewer的选项</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些帮助&lt;/p&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/post/test/"/>
    <id>http://yoursite.com/post/test/</id>
    <published>2019-04-08T11:05:54.247Z</published>
    <updated>2019-04-08T11:05:54.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试公式"><a href="#测试公式" class="headerlink" title="测试公式"></a>测试公式</h2><p>$$ \sum_{i=0}^{n}i^2+i+i^{^{\frac{1}{2}}} $$<br><a id="more"></a></p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><img src="http://public-media-chudonghao.oss-cn-shanghai.aliyuncs.com/%E6%A5%9A%E6%A0%8B%E6%B5%A9%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87.png" alt> </p><h2 id="测试mermaid"><a href="#测试mermaid" class="headerlink" title="测试mermaid"></a>测试mermaid</h2><pre><mermaid>graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</mermaid></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试公式&quot;&gt;&lt;a href=&quot;#测试公式&quot; class=&quot;headerlink&quot; title=&quot;测试公式&quot;&gt;&lt;/a&gt;测试公式&lt;/h2&gt;&lt;p&gt;$$ \sum_{i=0}^{n}i^2+i+i^{^{\frac{1}{2}}} $$&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>诗</title>
    <link href="http://yoursite.com/post/%E8%AF%97/"/>
    <id>http://yoursite.com/post/诗/</id>
    <published>2019-04-03T02:44:36.000Z</published>
    <updated>2019-04-03T02:53:36.400Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些诗<br><a id="more"></a></p><div style="text-align:center;"><br>上李邕<br>李白<br>大鹏一日同风起，扶摇直上九万里。<br>假令风歇时下来，犹能簸却沧溟水。<br>时人见我恒殊调，闻余大言皆冷笑。<br>宣父犹能畏后生，丈夫未可轻年少。<br><br>励学篇<br>赵恒<br>富家不用买良田，书中自有千钟粟。<br>安居不用架高楼，书中自有黄金屋。<br>出门莫恨无人随，书中车马多如簇。<br>娶妻莫恨无良媒，书中自有颜如玉。<br>男儿欲遂平生志，五经勤向窗前读。<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些诗&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>自动控制原理学习笔记</title>
    <link href="http://yoursite.com/post/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/自动控制原理学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T05:34:47.089Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="自动控制原理" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++的爱与恨</title>
    <link href="http://yoursite.com/post/c-%E7%9A%84%E7%88%B1%E4%B8%8E%E6%81%A8/"/>
    <id>http://yoursite.com/post/c-的爱与恨/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-21T11:29:31.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>静态，确定类型</li><li>面向对象又底层</li><li>自由度高</li><li>模板编程</li><li>RAII等</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>自由度高，就跟西方所谓的自由一样<br><p>没有标准命名规范，没有标准包管理系统，没有标准构建系统<br></p><p>编程人员需要做很多编程工作之外的内容<br></p><p>自由应该是创造自由，思想自由，而不是很多不必要的自由<br></p><p>创造与思想是编程最重要的部分</p></li><li>模板编程<br><p>模板的重要作用有二：一是代码复用，二是反射<br></p><p>其中的反射机制跟坨屎一样</p></li><li>其他<br><p>语法其实包含着思想，语法应该体现思想。这可以参考Rust</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态，确定类型&lt;/li&gt;
&lt;li&gt;面向对象又底层&lt;/li&gt;
&lt;li&gt;自由度高&lt;/li&gt;
&lt;li&gt;模板编程&lt;/li&gt;
&lt;li&gt;RA
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数字信号处理学习笔记</title>
    <link href="http://yoursite.com/post/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/数字信号处理学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T05:34:25.269Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="数字信号处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>信号与系统学习笔记</title>
    <link href="http://yoursite.com/post/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/post/信号与系统学习笔记/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-20T06:12:29.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p><img src alt="图１"><br>图１、几种信号</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第一种定义：随时间变化的物理量</p><ul><li>不一定只随时间变化</li><li>不一定是物理量</li><li>不一定是变量</li></ul><p>第二种定义：一个确定的函数，如图１</p><h3 id="信号的分类"><a href="#信号的分类" class="headerlink" title="信号的分类"></a>信号的分类</h3><p>分类方法１：</p><ul><li>确定性信号，可以用确定的时间函数加以确定</li><li>随机信号，可以统计特征描述</li></ul><p>分类方法２，如图１：</p><ul><li>连续信号</li><li>离散信号</li></ul><p>分类方法３：</p><ul><li>周期信号</li><li>非周期信号</li></ul><p>讨论：周期信号与周期信号的叠加或相乘之后的信号</p><h3 id="信号的表述"><a href="#信号的表述" class="headerlink" title="信号的表述"></a>信号的表述</h3><p>时域法$f(t)$<br>变换域法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信号&quot;&gt;&lt;a href=&quot;#信号&quot; class=&quot;headerlink&quot; title=&quot;信号&quot;&gt;&lt;/a&gt;信号&lt;/h2&gt;&lt;p&gt;&lt;img src alt=&quot;图１&quot;&gt;&lt;br&gt;图１、几种信号&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信号与系统" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++模板编程</title>
    <link href="http://yoursite.com/post/c-%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/post/c-模板编程/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-30T10:06:17.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板的作用"><a href="#模板的作用" class="headerlink" title="模板的作用"></a>模板的作用</h2><h3 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h3><h3 id="静态反射机制"><a href="#静态反射机制" class="headerlink" title="静态反射机制"></a>静态反射机制</h3><p>对C++的静态反射机制，只能用NM来形容我的内心的感受</p><h2 id="主要名词"><a href="#主要名词" class="headerlink" title="主要名词"></a>主要名词</h2><p>重载决议　SFINAE　面向对象　面向过程　enable_if　auto　decltype　显示实例化　类型别名，别名模版　重载函数的地址</p><ul><li>enable_if使用SFINAE可以处理ambiguous</li><li>重载决议可以处理TODO</li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>函数模板名称查找（可能涉及参数依赖查找）　-&gt;　模板实参推导　-&gt;　模板实参替换（可能涉及 SFINAE ）　-&gt;　重载决议</p><h2 id="遇到的特殊要求：精确匹配函数，拒绝隐式转换"><a href="#遇到的特殊要求：精确匹配函数，拒绝隐式转换" class="headerlink" title="遇到的特殊要求：精确匹配函数，拒绝隐式转换"></a>遇到的特殊要求：精确匹配函数，拒绝隐式转换</h2><p>目前只会用类偏特化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板的作用&quot;&gt;&lt;a href=&quot;#模板的作用&quot; class=&quot;headerlink&quot; title=&quot;模板的作用&quot;&gt;&lt;/a&gt;模板的作用&lt;/h2&gt;&lt;h3 id=&quot;代码复用&quot;&gt;&lt;a href=&quot;#代码复用&quot; class=&quot;headerlink&quot; title=&quot;代码复用&quot;
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>对反射机制的思考</title>
    <link href="http://yoursite.com/post/%E5%AF%B9%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/post/对反射机制的思考/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-28T12:42:28.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><ul><li>类型的属性</li><li>某种函数（过程）调用的合法性</li></ul><h2 id="C-中遇到的问题"><a href="#C-中遇到的问题" class="headerlink" title="C++中遇到的问题"></a>C++中遇到的问题</h2><ul><li>如何判断一个调用是否合法，并确定具体调用了<strong>哪个重载</strong>函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反射的作用&quot;&gt;&lt;a href=&quot;#反射的作用&quot; class=&quot;headerlink&quot; title=&quot;反射的作用&quot;&gt;&lt;/a&gt;反射的作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类型的属性&lt;/li&gt;
&lt;li&gt;某种函数（过程）调用的合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;C-中
      
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>C++模板实参推导</title>
    <link href="http://yoursite.com/post/c-%E6%A8%A1%E6%9D%BF%E5%AE%9E%E5%8F%82%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/post/c-模板实参推导/</id>
    <published>2019-04-02T22:09:05.000Z</published>
    <updated>2019-04-03T04:53:52.086Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/language/template_argument_deduction" target="_blank" rel="noopener">模板实参推导 - cppreference.com</a> </p><h2 id="引用折叠"><a href="#引用折叠" class="headerlink" title="引用折叠"></a>引用折叠</h2><ul><li><code>T &amp; &amp;</code> <code>T &amp; &amp;&amp;</code> <code>T &amp;&amp; &amp;</code>都被折叠为<code>T &amp;</code></li><li><code>T &amp;&amp; &amp;&amp;</code>折叠为<code>T &amp;&amp;</code></li></ul><h2 id="模板实参推导表"><a href="#模板实参推导表" class="headerlink" title="模板实参推导表"></a>模板实参推导表</h2><table><thead><tr><th></th><th>int &amp;</th><th>const int &amp;</th><th>int &amp;&amp;</th><th>const int &amp;&amp;</th></tr></thead><tbody><tr><td>T / const T</td><td>(int) [T = int]</td><td>(int) [T = int]</td><td>(int) [T = int]</td><td>(int) [T = int]</td></tr><tr><td>T &amp;</td><td>(int&amp;) [T = int]</td><td>(int const&amp;) [T = int const]</td><td>ERROR</td><td>(int const&amp;) [T = int const]</td></tr><tr><td>const T &amp;</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td><td>(int const&amp;) [T = int]</td></tr><tr><td>T &amp;&amp;</td><td>(int&amp;) [T = int&amp;]</td><td>(int const&amp;) [T = int const&amp;]</td><td>(int&amp;&amp;) [T = int]</td><td>(int const&amp;&amp;) [T = int const]</td></tr><tr><td>const T &amp;&amp;</td><td>ERROR</td><td>ERROR</td><td>(int const&amp;&amp;) [T = int]</td><td>(int const&amp;&amp;) [T = int]</td></tr></tbody></table><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocT</span><span class="params">(<span class="keyword">const</span> T t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooTR</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocTR</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooTr</span><span class="params">(T &amp;&amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foocTr</span><span class="params">(<span class="keyword">const</span> T &amp;&amp;t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">0</span>;</span><br><span class="line">  A2 a;</span><br><span class="line">  <span class="keyword">const</span> A2 ca = A2();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"int:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(i);</span><br><span class="line">  foocT(i);</span><br><span class="line">  fooTR(i);</span><br><span class="line">  foocTR(i);</span><br><span class="line">  fooTr(i);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(i);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void foocTr(const T &amp;&amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const int:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(ci);</span><br><span class="line">  foocT(ci);</span><br><span class="line">  fooTR(ci);</span><br><span class="line">  foocTR(ci);</span><br><span class="line">  fooTr(ci);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(ci);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void foocTr(const T &amp;&amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"int &amp;&amp;:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(i));</span><br><span class="line">  foocT(move(i));</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//fooTR(move(i));</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTR(T &amp;) ERROR"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  foocTR(move(i));</span><br><span class="line">  fooTr(move(i));</span><br><span class="line">  foocTr(move(i));</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const int &amp;&amp;:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(ci));</span><br><span class="line">  foocT(move(ci));</span><br><span class="line">  fooTR(move(ci));</span><br><span class="line">  foocTR(move(ci));</span><br><span class="line">  fooTr(move(ci));</span><br><span class="line">  foocTr(move(ci));</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"A:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(a);</span><br><span class="line">  foocT(a);</span><br><span class="line">  fooTR(a);</span><br><span class="line">  foocTR(a);</span><br><span class="line">  fooTr(a);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(a);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTr(const T &amp;&amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const A:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(ca);</span><br><span class="line">  foocT(ca);</span><br><span class="line">  fooTR(ca);</span><br><span class="line">  foocTR(ca);</span><br><span class="line">  fooTr(ca);</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//foocTr(ca);</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTr(const T &amp;&amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"A &amp;&amp;:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(a));</span><br><span class="line">  foocT(move(a));</span><br><span class="line">  <span class="comment">// ERROR</span></span><br><span class="line">  <span class="comment">//fooTR(move(a));</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"void fooTR(T &amp;) ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  foocTR(move(a));</span><br><span class="line">  fooTr(move(a));</span><br><span class="line">  foocTr(move(a));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"const A &amp;&amp;:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  fooT(move(ca));</span><br><span class="line">  foocT(move(ca));</span><br><span class="line">  fooTR(move(ca));</span><br><span class="line">  foocTR(move(ca));</span><br><span class="line">  fooTr(move(ca));</span><br><span class="line">  foocTr(move(ca));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">int:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = int &amp;]</span><br><span class="line">void foocTr(const T &amp;&amp;) ERROR</span><br><span class="line">const int:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = const int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const int &amp;]</span><br><span class="line">void foocTr(const T &amp;&amp;) ERROR</span><br><span class="line">int &amp;&amp;:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) ERROR</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = int]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = int]</span><br><span class="line">const int &amp;&amp;:</span><br><span class="line">void fooT(T) [T = int]</span><br><span class="line">void foocT(const T) [T = int]</span><br><span class="line">void fooTR(T &amp;) [T = const int]</span><br><span class="line">void foocTR(const T &amp;) [T = int]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const int]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = int]</span><br><span class="line">A:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = A2 &amp;]</span><br><span class="line">void fooTr(const T &amp;&amp;) ERROR</span><br><span class="line">const A:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = const A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const A2 &amp;]</span><br><span class="line">void fooTr(const T &amp;&amp;) ERROR</span><br><span class="line">A &amp;&amp;:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) ERROR</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = A2]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = A2]</span><br><span class="line">const A &amp;&amp;:</span><br><span class="line">void fooT(T) [T = A2]</span><br><span class="line">void foocT(const T) [T = A2]</span><br><span class="line">void fooTR(T &amp;) [T = const A2]</span><br><span class="line">void foocTR(const T &amp;) [T = A2]</span><br><span class="line">void fooTr(T &amp;&amp;) [T = const A2]</span><br><span class="line">void foocTr(const T &amp;&amp;) [T = A2]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/language/template_argument_deduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;模板实参推导 - cppreference.com&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;引用折叠&quot;&gt;&lt;a href=&quot;#引用折叠&quot; class=&quot;headerlink&quot; title=&quot;引用折叠&quot;&gt;&lt;/a&gt;引用折叠&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T &amp;amp; &amp;amp;&lt;/code&gt; &lt;code&gt;T &amp;amp; &amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;T &amp;amp;&amp;amp; &amp;amp;&lt;/code&gt;都被折叠为&lt;code&gt;T &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T &amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;折叠为&lt;code&gt;T &amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模板实参推导表&quot;&gt;&lt;a href=&quot;#模板实参推导表&quot; class=&quot;headerlink&quot; title=&quot;模板实参推导表&quot;&gt;&lt;/a&gt;模板实参推导表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;int &amp;amp;&lt;/th&gt;
&lt;th&gt;const int &amp;amp;&lt;/th&gt;
&lt;th&gt;int &amp;amp;&amp;amp;&lt;/th&gt;
&lt;th&gt;const int &amp;amp;&amp;amp;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T / const T&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;td&gt;(int) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;amp;&lt;/td&gt;
&lt;td&gt;(int&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const]&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const T &amp;amp;&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;(int&amp;amp;) [T = int&amp;amp;]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;) [T = int const&amp;amp;]&lt;/td&gt;
&lt;td&gt;(int&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int const]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const T &amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;td&gt;(int const&amp;amp;&amp;amp;) [T = int]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://yoursite.com/post/%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/post/算法/</id>
    <published>2019-03-28T14:43:25.000Z</published>
    <updated>2019-04-28T11:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有多个图片来自维基百科</p></blockquote><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><ul><li>排序的方法 插入、交换、选择、合并等</li><li>复杂度（最差、平均、和最好性能），依据列表（list）的大小$n$<ul><li>时间复杂度 一般而言，好的性能是 $ O(n\log n)$，坏的性能是 $ O(n^{2})$。对于一个排序理想的性能是 $O(n)$，但平均而言不可能达到。<strong>基于比较</strong>的排序算法对大多数输入而言<strong>至少需要$O(n \log n)$</strong>。</li><li>空间复杂度（内存等资源的使用量）</li></ul></li><li>交换的次数</li><li>比较的次数</li><li>稳定性 稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录 $R$和 $S$，且在原本的列表中 $R$出现在$S$之前，在排序过的列表中 $R$也将会是在$S$之前。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif" alt="冒泡排序"></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>和冒泡排序相比，明显减少了交换的次数</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b0/Selection_sort_animation.gif" alt="选择排序"><br><a id="more"></a></p><h3 id="侏儒排序"><a href="#侏儒排序" class="headerlink" title="侏儒排序"></a>侏儒排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Sorting_gnomesort_anim.gif" alt="侏儒排序"></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>设中分组<br>可实现方法之一：挖坑填数</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="快速排序"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote><p>可以想想打扑克起牌</p></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>是插入排序的一种更高效的改进版本</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d8/Sorting_shellsort_anim.gif" alt="希尔排序"></p><h3 id="图书馆排序"><a href="#图书馆排序" class="headerlink" title="图书馆排序"></a>图书馆排序</h3><blockquote><p>可以想象图书馆每行书籍后面的空位</p></blockquote><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>不断将小的有序集合合并为大的有序集合</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c5/Merge_sort_animation2.gif" alt="归并排序"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Merge-sort-example-300px.gif/220px-Merge-sort-example-300px.gif" alt="归并排序"></p><h3 id="梳排序"><a href="#梳排序" class="headerlink" title="梳排序"></a>梳排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/46/Comb_sort_demo.gif" alt="梳排序"></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Sorting_heapsort_anim.gif" alt="堆排序"></p><p>二叉树<br>满二叉树<br>完全二叉树<br>完全二叉树用链表表示：Parent&lt;=&gt;L[i] Left&lt;=&gt;L[2i+1] Right&lt;=&gt;L[2i+2]<br>大顶堆与小顶堆<br>长度为<code>len</code>的完全二叉树，最靠右的父亲的index为<code>len/2-1</code><br>堆排序的过程：</p><ul><li>建立大（小）顶堆<br>从最靠右的父亲开始调整子叶关系，使整个堆满足大（小）顶堆</li><li>迭代 最大堆调整<ul><li>移动堆顶（最大或最小值）（与最后一个元素交换）</li><li><code>--len</code></li><li>最大堆调整<br>从第一个父亲开始调整子叶关系，使整个堆重新满足大（小）顶堆</li></ul></li></ul><h3 id="内省排序"><a href="#内省排序" class="headerlink" title="内省排序"></a>内省排序</h3><p>考虑到快速排序的不稳定性，内省排序在一定条件下对子序列使用堆排序</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h3 id="耐心排序"><a href="#耐心排序" class="headerlink" title="耐心排序"></a>耐心排序</h3><p>桶排序的一种</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h2 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h2><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有多个图片来自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;排序的方法 插入、交换、选择、合并等&lt;/li&gt;
&lt;li&gt;复杂度（最差、平均、和最好性能），依据列表（list）的大小$n$&lt;ul&gt;
&lt;li&gt;时间复杂度 一般而言，好的性能是 $ O(n\log n)$，坏的性能是 $ O(n^{2})$。对于一个排序理想的性能是 $O(n)$，但平均而言不可能达到。&lt;strong&gt;基于比较&lt;/strong&gt;的排序算法对大多数输入而言&lt;strong&gt;至少需要$O(n \log n)$&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;空间复杂度（内存等资源的使用量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换的次数&lt;/li&gt;
&lt;li&gt;比较的次数&lt;/li&gt;
&lt;li&gt;稳定性 稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录 $R$和 $S$，且在原本的列表中 $R$出现在$S$之前，在排序过的列表中 $R$也将会是在$S$之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Bubble_sort_animation.gif&quot; alt=&quot;冒泡排序&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;和冒泡排序相比，明显减少了交换的次数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/b0/Selection_sort_animation.gif&quot; alt=&quot;选择排序&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++填坑之路</title>
    <link href="http://yoursite.com/post/c-%E5%A1%AB%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/post/c-填坑之路/</id>
    <published>2019-03-28T14:43:25.000Z</published>
    <updated>2019-04-21T05:06:40.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组变量加减操作"><a href="#数组变量加减操作" class="headerlink" title="数组变量加减操作"></a>数组变量加减操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *(a+<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//NOTE a可视为元素指针</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; *++a &lt;&lt; endl;//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="标准库迭代器"><a href="#标准库迭代器" class="headerlink" title="标准库迭代器"></a>标准库迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> i = v.begin();</span><br><span class="line">  v.erase(i);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> j = l.begin();</span><br><span class="line">  l.erase(j);</span><br><span class="line">  <span class="comment">//NOTE 这里的j已经失效,虽然输出了1</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 #这个输出看似正确,但没有意义</span><br></pre></td></tr></table></figure><p>迭代器是否失效请看<a href="https://zh.cppreference.com/w/cpp/container#迭代器非法化" target="_blank" rel="noopener">这里</a><br>使用时可以考虑erase函数的返回值 其为指向被删除元素的下一个元素的迭代器</p><h2 id="虚函数与成员函数调用行为与成员指针"><a href="#虚函数与成员函数调用行为与成员指针" class="headerlink" title="虚函数与成员函数调用行为与成员指针"></a>虚函数与成员函数调用行为与成员指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  A() &#123; foo(); &#125;</span><br><span class="line">  ~A() &#123; foo(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::foo()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foooo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::foooo()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    f();</span><br><span class="line">    A::f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  B() &#123; foo(); &#125;</span><br><span class="line">  ~B() &#123; foo(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::foo()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foooo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"B::foooo()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    f();</span><br><span class="line">    A::f();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  B *bp = &amp;b;</span><br><span class="line">  A *ap = &amp;b;</span><br><span class="line">  ap-&gt;foo();</span><br><span class="line">  ap-&gt;A::foo();</span><br><span class="line">  <span class="keyword">void</span> (A::*Afoop)() = &amp;A::foo;</span><br><span class="line">  (ap-&gt;*Afoop)();</span><br><span class="line">  <span class="comment">//void (A::*Afuncp)() = &amp;A::func;</span></span><br><span class="line">  <span class="comment">//(bp-&gt;*Afuncp)();</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, &amp;B::f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, &amp;B::func);</span><br><span class="line">  <span class="comment">//cout &lt;&lt; &amp;B::func &lt;&lt; endl;</span></span><br><span class="line">  ap-&gt;foooo();</span><br><span class="line">  ap-&gt;A::foooo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A::foo()</span><br><span class="line">B::foo()</span><br><span class="line">B::foo()</span><br><span class="line">A::foo()</span><br><span class="line">B::foo()</span><br><span class="line">00000001</span><br><span class="line">00402010</span><br><span class="line">B::foooo()</span><br><span class="line">B::f()</span><br><span class="line">A::f()</span><br><span class="line">A::foooo()</span><br><span class="line">B::f()</span><br><span class="line">A::f()</span><br><span class="line">B::foo()</span><br><span class="line">A::foo()</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>构造函数与析构函数一个重要的职能或特点是类型确定，即进入函数时，先修改虚表指针，所以在其中对虚函数的调用不是运行时确定的（编译器的实现是直接调用，即不通过虚表）</li><li>成员函数指针形式的调用是动态的（TODO 成员函数指针的实现）</li><li>带域的调用形式是编译期确定的</li></ul><h2 id="非法delete问题"><a href="#非法delete问题" class="headerlink" title="非法delete问题"></a>非法delete问题</h2><h3 id="delete-2问题"><a href="#delete-2问题" class="headerlink" title="delete*2问题"></a>delete*2问题</h3><blockquote><p>“自由存储区可能会被破坏”<br>———《C+P》</p></blockquote><h3 id="delete-new-1-问题"><a href="#delete-new-1-问题" class="headerlink" title="delete[](new[]+1)问题"></a>delete[](new[]+1)问题</h3><p>cplusplus.com上说：</p><ul><li>delete[]的参数ptr，应该是new[]返回的ptr</li><li>如果delete的参数ptr无效，将产生未定义的结果<h3 id="A-a-new-B-2-delete-a"><a href="#A-a-new-B-2-delete-a" class="headerlink" title="A *a = new B[2];delete []a;"></a>A *a = new B[2];delete []a;</h3>经过测试，也是未定义的。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>这应该牵扯到C++堆内存管理问题，以上行为都将产生未定义结果，特别的，第二种情况下程序直接崩溃的可能性巨大。<h2 id="new-delete-顺序问题"><a href="#new-delete-顺序问题" class="headerlink" title="new[] delete[] 顺序问题"></a>new[] delete[] 顺序问题</h2>先构后析<h2 id="对合法但无效的栈内存进行访问"><a href="#对合法但无效的栈内存进行访问" class="headerlink" title="对合法但无效的栈内存进行访问"></a>对合法但无效的栈内存进行访问</h2>将会产生未定义的结果<h2 id="操作符的操作数的求值顺序"><a href="#操作符的操作数的求值顺序" class="headerlink" title="操作符的操作数的求值顺序"></a>操作符的操作数的求值顺序</h2><blockquote><p>“除逻辑操作符，“?:”操作符，“,”操作符外，其他操作符并未指定其操作数的求职顺序”<br>———《C+P》</p></blockquote></li></ul><p>比如<code>expr1*expr2</code>，<code>expr1</code>与<code>expr2</code>的求值顺序无法得知<br>比如表达式<code>if (ia[id++] &lt; ia[id] )</code>的行为没有明确定义<br>特别是在<code>expr1</code>与<code>expr2</code>操作涉及并修改同一对象时，求解顺序相当重要</p><p>个人：以上（《C+P》）的内容是我不经意间看见的，以前一直按照结合性方向使用上述类似表达式，比如自左向右结合就先计算左边，也没出现过严重问题，在这里记录以防不测。</p><h2 id="数组变量的使用"><a href="#数组变量的使用" class="headerlink" title="数组变量的使用"></a>数组变量的使用</h2><p>除<code>&amp;</code>与<code>sizeof</code>，对数组变量的使用将使数组变量提升为成员指针<br>例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10被忽略，即arr的类型被视为int *</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="comment">//arr_p被视为指向大小为10的数组的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>(*arr_p)[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组变量加减操作&quot;&gt;&lt;a href=&quot;#数组变量加减操作&quot; class=&quot;headerlink&quot; title=&quot;数组变量加减操作&quot;&gt;&lt;/a&gt;数组变量加减操作&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *(a+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//NOTE a可视为元素指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//cout &amp;lt;&amp;lt; *++a &amp;lt;&amp;lt; endl;//编译错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++语法" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
